"use strict";function kmeans(t,n){for(var e=n.k||Math.round(Math.sqrt(t.length/2)),r=n.iterations,i=t.map(function(t){return new Point(t)}),o=[],u=0;u<e;u++)o.push(new Centroid(i[u%i.length].location(),u));for(var a=0;a<r;a++)i.forEach(function(t){t.updateLabel(o)}),o.forEach(function(t){t.updateLocation(i)});return{points:i,centroids:o}}function Point(t){var n=this;this.location=getterSetter(t),this.label=getterSetter(),this.updateLabel=function(t){var e=t.map(function(t){return sumOfSquareDiffs(n.location(),t.location())});n.label(mindex(e))}}function Centroid(t,n){var e=this;this.location=getterSetter(t),this.label=getterSetter(n),this.updateLocation=function(t){var n=t.filter(function(t){return t.label()==e.label()});n.length>0&&e.location(averageLocation(n))}}function getterSetter(t,n){var e=t,r=n||function(t){return!0};return function(t){if(void 0===t)return e;r(t)&&(e=t)}}function sumOfSquareDiffs(t,n){return t.map(function(t,e){return Math.pow(t-n[e],2)}).reduce(function(t,n){return t+n},0)}function mindex(t){var n=t.reduce(function(t,n){return Math.min(t,n)});return t.indexOf(n)}function sumVectors(t,n){return t.map(function(t,e){return t+n[e]})}function averageLocation(t){var n=t[0].location().map(function(){return 0});return t.map(function(t){return t.location()}).reduce(function(t,n){return sumVectors(t,n)},n).map(function(n){return n/t.length})}module.exports={data:getterSetter([],function(t){var n=t[0].length;return t.map(function(t){return t.length==n}).reduce(function(t,n){return t&n},!0)}),clusters:function(){var t=kmeans(this.data(),{k:this.k(),iterations:this.iterations()}),n=t.points;return t.centroids.map(function(t){return{centroid:t.location(),points:n.filter(function(n){return n.label()==t.label()}).map(function(t){return t.location()})}})},k:getterSetter(void 0,function(t){return t%1==0&t>0}),iterations:getterSetter(Math.pow(10,3),function(t){return t%1==0&t>0})};