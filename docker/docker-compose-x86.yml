version: '2'
services:
  redis:
    image: shareai/redis:x86
    restart: always
    container_name: "redis"
    command: sh -c "rm -rf /data/*.rdb && redis-server --maxmemory 40mb --maxmemory-policy allkeys-lru --save \"\" --appendonly no --dbfilename \"\""
    #ports:
    #  - 6379:6379
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "10"
    networks:
      main:
        aliases:
          - redis
  broker:
    image: shareai/broker:x86
    restart: always
    container_name: "broker"
    ports:
      - 1883:1883
      - 9001:9001
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "10"
    networks:
      main:
        aliases:
          - mqttserver
  camera:
    container_name: "camera"
    command: sh -c "if [ ! -f /opt/nvr/conf/conf.sqlite ]; then cp /opt/nvr/sql/shinobi.sample.sqlite /opt/nvr/conf/conf.sqlite -a ; fi && sleep 3 &&  (node /opt/nvr/cron.js &) && node /opt/nvr/camera.js"
    image: shareai/nvr:x86
    restart: always
    privileged: true
    environment:
      ADMIN_PASSWORD: ${ADMIN_PASSWORD}
      TIMEZONE_OFFSET: ${TIMEZONE_OFFSET}
      IMAGE_DIR: "/opt/nvr/detector/images"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "10"
    ports:
      - 8080:8080
    networks:
      main:
        aliases:
          - camera
    volumes:
      - ./videos:/opt/nvr/videos
      - ./workaipython/sql:/opt/nvr/conf
      - ./dev/shm/streams:/dev/shm/streams
      - ./opt/nvr/detector/images:/opt/nvr/detector/images
  flower:
    command: sh -c "flower --port=5555"
    image: shareai/flower:x86
    restart: always
    ports:
      - 5555:5555
    depends_on:
      - "redis"
    environment:
      CELERY_BROKER_URL: redis://redis/0
      CELERY_RESULT_BACKEND: redis://redis/0
    networks:
      main:
        aliases:
          - flower
  face_detector:
    command: sh -c "python test.py && python worker.py worker --loglevel INFO -E -n detect -c 1 -Q detect"
    image: shareai/face_detector:x86
    container_name: "face_detector"
    env_file:
      - ./production_1.env
    environment:
      REDIS_HOST: "redis"
      REDIS_PORT: "6379"
    restart: always
    depends_on:
      - "redis"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "10"
    volumes:
      - ./workaipython/ro_serialno:/dev/ro_serialno
      - ./workaipython/groupid.txt:/data/usr/com.deep.workai/cache/groupid.txt
      - ./workaipython/cache:/data/runtime/cache
      - ./opt/nvr/detector/images:/opt/nvr/detector/images
      - ./opt/nvr/detector/frames:/opt/nvr/videos/frames
      - ./dev/shm/streams:/dev/shm/streams
    networks:
      main:
        aliases:
          - facd_detector
  embedding:
    command: sh -c "./start_embedding_only.sh"
    image: shareai/embedding:x86
    container_name: "embedding"
    env_file:
      - ./cluster.env
      - ./servers.env
      - ./aws.env
    environment:
      RUNTIME_BASEDIR: "/data/runtime/src/"
      HAS_OPENCL: "false"
    restart: always
    depends_on:
      - "redis"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "10"
    networks:
      main:
        aliases:
          - workaipython
    privileged: true
    ports:
      - 5000:5000
    volumes:
      - ./workaipython/ro_serialno:/dev/ro_serialno
      - ./workaipython/groupid.txt:/data/usr/com.deep.workai/cache/groupid.txt
      - ./workaipython/cache:/data/runtime/cache
      - ./workaipython/data:/data/runtime/src/data
      - ./opt/nvr/detector/images:/opt/nvr/detector/images
      - ./opt/nvr/detector/frames:/opt/nvr/videos/frames
  detector_plugin:
    container_name: "detector_plugin"
    depends_on:
      - "camera"
      - "flower"
      - "redis"
      - "broker"
    command: sh -c "export && cd /opt/nvr/detector && node /opt/nvr/detector/index.js"
    logging:
      driver: json-file
      options:
        max-size: "10m"
        max-file: "10"
    image: shareai/nvr:x86
    restart: always
    privileged: true
    env_file:
      - ./production_1.env
      - ./cluster.env
      - ./servers.env
      - ./aws.env
    environment:
      TIMEZONE_OFFSET: ${TIMEZONE_OFFSET}
      IMAGE_DIR: "/opt/nvr/detector/images"
    networks:
      main:
        aliases:
          - detector_plugin
    ports:
      - 3030:3000
    volumes:
      - ./videos:/opt/nvr/videos
      - ./workaipython/ro_serialno:/dev/ro_serialno
      - ./workaipython/groupid.txt:/data/usr/com.deep.workai/cache/groupid.txt
      - ./opt/nvr/detector/images:/opt/nvr/detector/images
      - ./opt/nvr/detector/face_motion:/opt/nvr/detector/face_motion
      - ./opt/nvr/detector/face_cropped:/opt/nvr/detector/face_cropped
networks:
  main:
